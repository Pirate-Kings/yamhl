<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1" />
<meta name="generator" content="pdoc 0.10.0" />
<title>yamhl.settings API documentation</title>
<meta name="description" content="" />
<link rel="preload stylesheet" as="style" href="https://cdnjs.cloudflare.com/ajax/libs/10up-sanitize.css/11.0.1/sanitize.min.css" integrity="sha256-PK9q560IAAa6WVRRh76LtCaI8pjTJ2z11v0miyNNjrs=" crossorigin>
<link rel="preload stylesheet" as="style" href="https://cdnjs.cloudflare.com/ajax/libs/10up-sanitize.css/11.0.1/typography.min.css" integrity="sha256-7l/o7C8jubJiy74VsKTidCy1yBkRtiUGbVkYBylBqUg=" crossorigin>
<link rel="stylesheet preload" as="style" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.1/styles/atom-one-dark.min.css" crossorigin>
<style></style>
<style media="screen and (min-width: 700px)"></style>
<style media="print"></style>
<script defer src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.1/highlight.min.js" integrity="sha256-Uv3H6lx7dJmRfRvH8TH6kJD1TSK1aFcwgx+mdg3epi8=" crossorigin></script>
<script>window.addEventListener('DOMContentLoaded', () => hljs.initHighlighting())</script>
<script src="/script.js"></script>
<link rel="stylesheet" href="/styles.css">
</head>
<body>
<main>
<article id="content">
<header>
<h1 class="title">Module <code>yamhl.settings</code></h1>
</header>
<section id="section-intro">
<details class="source">
<summary>
<span>Expand source code</span>
<a href="https://github.com/whinee/mangDL/blob/None/yamhl/settings.py#L1-L89" class="git-link">Browse git</a>
</summary>
<pre><code class="python">import json
from os import path
from os.path import abspath as ap
from os.path import dirname as dn
from typing import Any, Dict

import yaml


def readcfg(file: str) -&gt; Any:
    &#34;&#34;&#34;Read the contents of a file with the given file name.

    Args:
        file (str): File name of the file to read the contents of.

    Returns:
        Any: The contents of the file.
    &#34;&#34;&#34;
    with open(file, &#34;r&#34;) as f:
        d = {
            &#34;json&#34;: lambda f: json.load(f),
            &#34;yml&#34;: lambda f: yaml.safe_load(f.read()),
        }
        return d[file.split(&#34;.&#34;)[-1]](f)


def stg(stg: str, file: str = path.join(dn(ap(__file__)), &#34;stg.json&#34;)) -&gt; Any:
    &#34;&#34;&#34;Retrieve dictionary value of the config file with the given file name
    using recursive indexing with a string.
    ex.:
        Given that settings.json contains: `{&#34;data&#34;: {&#34;attr&#34;: {&#34;ch&#34;: 1}}}`
        `stg(&#34;data/attr/ch&#34;, &#34;settings.json&#34;)` will return `1`

    Args:
        stg (str): Directory of the value to be retrieved.
        file (str, optional): File name of the file to get the value from. Defaults to `path.join(dn(ap(__file__)), &#34;settings.json&#34;)`.

    Returns:
        Any: The retrieved value.
    &#34;&#34;&#34;
    op = readcfg(file)
    if stg is not None:
        for a in stg.split(&#34;/&#34;):
            op = op[a]
    return op


def wr_stg(stg: str, value: Any, file: str = path.join(dn(ap(__file__)), &#34;stg.json&#34;)) -&gt; None:
    &#34;&#34;&#34;Rewrite dictionary value of the config file with the given file name
    using recursive indexing with a string.
    ex.:
        Given that settings.json contains: `{&#34;data&#34;: {&#34;attr&#34;: {&#34;ch&#34;: 1}}}`
        `wr_stg(&#34;data/attr/ch&#34;, 2)`
        will rewrite settings.json to be: `{&#34;data&#34;: {&#34;attr&#34;: {&#34;ch&#34;: 2}}}`

    Args:
        stg (str): Directory of the value to be rewrited.
        value (Any): Value to rewrite to.
        file (str, optional): File name of the file to rewrite the value from. Defaults to path.join(dn(ap(__file__)), &#34;settings.json&#34;).

    Raises:
        FileNotFoundError: Raised if the file is not found.
    &#34;&#34;&#34;
    stg_dict = readcfg(file)

    def modify(stg: str, value: Any, stg_dict: Dict[Any, Any]):
        path_ls = stg.split(&#34;/&#34;)
        key = path_ls[0]
        if len(path_ls) &gt; 1:
            try:
                stg_dict[key]
            except KeyError:
                stg_dict[key] = {}
            if isinstance(stg_dict[key], dict):
                modify(stg.replace(f&#34;{key}/&#34;, &#34;&#34;), value, stg_dict[key])
            else:
                f_stg = &#39;&#34;][&#34;&#39;.join(stg.split(&#34;/&#34;))
                raise FileNotFoundError(f&#39;[&#34;{f_stg}&#34;] at {file} not found.&#39;)
        else:
            stg_dict[key] = value
            return stg_dict

    modify(stg, value, stg_dict)
    with open(path.join(dn(ap(__file__)), file), &#34;w&#34;) as f:
        d = {
            &#34;json&#34;: lambda f: json.dump(stg_dict, f, indent=4),
            &#34;yml&#34;: lambda f: yaml.dump(stg_dict, f, indent=4),
        }
        d[file.split(&#34;.&#34;)[-1]](f)</code></pre>
</details>
</section>
<section>
</section>
<section>
</section>
<section>
<h2 class="section-title" id="header-functions">Functions</h2>
<dl>
<dt id="yamhl.settings.readcfg"><code class="name flex">
<span>def <span class="ident">readcfg</span></span>(<span>file: str) ‑> Any</span>
</code></dt>
<dd>
<div class="desc"><p>Read the contents of a file with the given file name.</p>
<h2 id="args">Args</h2>
<dl>
<dt><strong><code>file</code></strong> :&ensp;<code>str</code></dt>
<dd>File name of the file to read the contents of.</dd>
</dl>
<h2 id="returns">Returns</h2>
<dl>
<dt><code>Any</code></dt>
<dd>The contents of the file.</dd>
</dl></div>
<details class="source">
<summary>
<span>Expand source code</span>
<a href="https://github.com/whinee/mangDL/blob/None/yamhl/settings.py#L10-L24" class="git-link">Browse git</a>
</summary>
<pre><code class="python">def readcfg(file: str) -&gt; Any:
    &#34;&#34;&#34;Read the contents of a file with the given file name.

    Args:
        file (str): File name of the file to read the contents of.

    Returns:
        Any: The contents of the file.
    &#34;&#34;&#34;
    with open(file, &#34;r&#34;) as f:
        d = {
            &#34;json&#34;: lambda f: json.load(f),
            &#34;yml&#34;: lambda f: yaml.safe_load(f.read()),
        }
        return d[file.split(&#34;.&#34;)[-1]](f)</code></pre>
</details>
</dd>
<dt id="yamhl.settings.stg"><code class="name flex">
<span>def <span class="ident">stg</span></span>(<span>stg: str, file: str = '/home/whine/MangDL/yahml/yamhl/stg.json') ‑> Any</span>
</code></dt>
<dd>
<div class="desc"><p>Retrieve dictionary value of the config file with the given file name
using recursive indexing with a string.
ex.:
Given that settings.json contains: <code>{"data": {"attr": {"ch": 1}}}</code>
<code>stg("data/attr/ch", "settings.json")</code> will return <code>1</code></p>
<h2 id="args">Args</h2>
<dl>
<dt><strong><code>stg</code></strong> :&ensp;<code>str</code></dt>
<dd>Directory of the value to be retrieved.</dd>
<dt><strong><code>file</code></strong> :&ensp;<code>str</code>, optional</dt>
<dd>File name of the file to get the value from. Defaults to <code>path.join(dn(ap(__file__)), "settings.json")</code>.</dd>
</dl>
<h2 id="returns">Returns</h2>
<dl>
<dt><code>Any</code></dt>
<dd>The retrieved value.</dd>
</dl></div>
<details class="source">
<summary>
<span>Expand source code</span>
<a href="https://github.com/whinee/mangDL/blob/None/yamhl/settings.py#L27-L45" class="git-link">Browse git</a>
</summary>
<pre><code class="python">def stg(stg: str, file: str = path.join(dn(ap(__file__)), &#34;stg.json&#34;)) -&gt; Any:
    &#34;&#34;&#34;Retrieve dictionary value of the config file with the given file name
    using recursive indexing with a string.
    ex.:
        Given that settings.json contains: `{&#34;data&#34;: {&#34;attr&#34;: {&#34;ch&#34;: 1}}}`
        `stg(&#34;data/attr/ch&#34;, &#34;settings.json&#34;)` will return `1`

    Args:
        stg (str): Directory of the value to be retrieved.
        file (str, optional): File name of the file to get the value from. Defaults to `path.join(dn(ap(__file__)), &#34;settings.json&#34;)`.

    Returns:
        Any: The retrieved value.
    &#34;&#34;&#34;
    op = readcfg(file)
    if stg is not None:
        for a in stg.split(&#34;/&#34;):
            op = op[a]
    return op</code></pre>
</details>
</dd>
<dt id="yamhl.settings.wr_stg"><code class="name flex">
<span>def <span class="ident">wr_stg</span></span>(<span>stg: str, value: Any, file: str = '/home/whine/MangDL/yahml/yamhl/stg.json') ‑> None</span>
</code></dt>
<dd>
<div class="desc"><p>Rewrite dictionary value of the config file with the given file name
using recursive indexing with a string.
ex.:
Given that settings.json contains: <code>{"data": {"attr": {"ch": 1}}}</code>
<code>wr_stg("data/attr/ch", 2)</code>
will rewrite settings.json to be: <code>{"data": {"attr": {"ch": 2}}}</code></p>
<h2 id="args">Args</h2>
<dl>
<dt><strong><code>stg</code></strong> :&ensp;<code>str</code></dt>
<dd>Directory of the value to be rewrited.</dd>
<dt><strong><code>value</code></strong> :&ensp;<code>Any</code></dt>
<dd>Value to rewrite to.</dd>
<dt><strong><code>file</code></strong> :&ensp;<code>str</code>, optional</dt>
<dd>File name of the file to rewrite the value from. Defaults to path.join(dn(ap(<strong>file</strong>)), "settings.json").</dd>
</dl>
<h2 id="raises">Raises</h2>
<dl>
<dt><code>FileNotFoundError</code></dt>
<dd>Raised if the file is not found.</dd>
</dl></div>
<details class="source">
<summary>
<span>Expand source code</span>
<a href="https://github.com/whinee/mangDL/blob/None/yamhl/settings.py#L48-L89" class="git-link">Browse git</a>
</summary>
<pre><code class="python">def wr_stg(stg: str, value: Any, file: str = path.join(dn(ap(__file__)), &#34;stg.json&#34;)) -&gt; None:
    &#34;&#34;&#34;Rewrite dictionary value of the config file with the given file name
    using recursive indexing with a string.
    ex.:
        Given that settings.json contains: `{&#34;data&#34;: {&#34;attr&#34;: {&#34;ch&#34;: 1}}}`
        `wr_stg(&#34;data/attr/ch&#34;, 2)`
        will rewrite settings.json to be: `{&#34;data&#34;: {&#34;attr&#34;: {&#34;ch&#34;: 2}}}`

    Args:
        stg (str): Directory of the value to be rewrited.
        value (Any): Value to rewrite to.
        file (str, optional): File name of the file to rewrite the value from. Defaults to path.join(dn(ap(__file__)), &#34;settings.json&#34;).

    Raises:
        FileNotFoundError: Raised if the file is not found.
    &#34;&#34;&#34;
    stg_dict = readcfg(file)

    def modify(stg: str, value: Any, stg_dict: Dict[Any, Any]):
        path_ls = stg.split(&#34;/&#34;)
        key = path_ls[0]
        if len(path_ls) &gt; 1:
            try:
                stg_dict[key]
            except KeyError:
                stg_dict[key] = {}
            if isinstance(stg_dict[key], dict):
                modify(stg.replace(f&#34;{key}/&#34;, &#34;&#34;), value, stg_dict[key])
            else:
                f_stg = &#39;&#34;][&#34;&#39;.join(stg.split(&#34;/&#34;))
                raise FileNotFoundError(f&#39;[&#34;{f_stg}&#34;] at {file} not found.&#39;)
        else:
            stg_dict[key] = value
            return stg_dict

    modify(stg, value, stg_dict)
    with open(path.join(dn(ap(__file__)), file), &#34;w&#34;) as f:
        d = {
            &#34;json&#34;: lambda f: json.dump(stg_dict, f, indent=4),
            &#34;yml&#34;: lambda f: yaml.dump(stg_dict, f, indent=4),
        }
        d[file.split(&#34;.&#34;)[-1]](f)</code></pre>
</details>
</dd>
</dl>
</section>
<section>
</section>
</article>
<nav id="sidebar">
<h1>MangDL</h1>
<form>
<input id="lunr-search" name="q" placeholder="Search..." aria-label="Search"
disabled minlength="2">
</form>
<link rel="preload stylesheet" as="style" href="https://cdnjs.cloudflare.com/ajax/libs/tingle/0.15.3/tingle.min.css" integrity="sha512-j1u8eUJ4f23xPPxwOrLUPQaCD2dwzNqqmDDcWS4deWsMv2ohLqmXXuP3hU7g8TyzbMSakP/mMqoNBYWj8AEIFg==" crossorigin>
<script src="https://cdnjs.cloudflare.com/ajax/libs/tingle/0.15.3/tingle.min.js" integrity="sha512-plGUER9JkeEWPPqQBE4sdLqBoQug5Ap+BCGMc7bJ8BXkm+VVj6QzkpBz5Yv2yPkkq+cqg9IpkBaGCas6uDbW8g==" crossorigin></script>
<style>
.modal-dialog iframe {
width: 100vw;
height: calc(100vh - 80px);
}
@media screen and (min-width: 700px) {
.modal-dialog iframe {
width: 70vw;
height: 80vh;
}
}
.modal-dialog .tingle-modal-box {
width: auto;
background: #0f0f0f;
}
.modal-dialog .tingle-modal-box__content {padding: 0;}
#search-status{
font-family: Liberation Mono;
}
footer{
font-family: Liberation Mono;
}
</style>
<script>
const input = document.getElementById('lunr-search');
input.disabled = false;
input.form.addEventListener('submit', (ev) => {
ev.preventDefault();
const url = new URL(window.location);
url.searchParams.set('q', input.value);
history.replaceState({}, null, url.toString());
search(input.value);
});
const query = new URL(window.location).searchParams.get('q');
if (query)
search(query);
function search(query) {
const url = '../doc-search.html#' + encodeURIComponent(query);
new tingle.modal({
cssClass: ['modal-dialog'],
onClose: () => {
const url = new URL(window.location);
url.searchParams.delete('q');
history.replaceState({}, null, url.toString());
setTimeout(() => input.focus(), 100);
}
}).setContent('<iframe src="' + url + '"></iframe>').open();
}
</script>
<h2>Index</h2>
<div class="toc">
<ul>
<li><a href="/index.html"><strong>Homepage</strong></a></li>
<li><a href="/installation.html"><strong>Installation</strong></a></li>
<li><a href="/upgrade.html"><strong>Upgrading</strong></a></li>
<li>
<a href="/providers.html"><strong>Providers</strong></a>
<ul>
<li><a href="/rejected.html"><strong>Rejected Sites</strong></a></li>
</ul>
</li>
<li><a href="/tou_disc.html"><strong>Terms of Usage & Disclaimer</strong></a></li>
<li><a href="/docs/index.html"><strong>Documentation</strong></a></li>
<li><a href="/changelog.html"><strong>Changelog</strong></a></li>
<li><a href="/license.html"><strong>License</strong></a></li>
<li><a href="/more.html"><strong>More Apps</strong></a></li>
<ul>
</div>
<div class="toc">
<ul></ul>
</div>
<ul id="index">
<li><h3>Super-module</h3>
<ul>
<li><code><a title="yamhl" href="index.html">yamhl</a></code></li>
</ul>
</li>
<li><h3><a href="#header-functions">Functions</a></h3>
<ul class="">
<li><code><a title="yamhl.settings.readcfg" href="#yamhl.settings.readcfg">readcfg</a></code></li>
<li><code><a title="yamhl.settings.stg" href="#yamhl.settings.stg">stg</a></code></li>
<li><code><a title="yamhl.settings.wr_stg" href="#yamhl.settings.wr_stg">wr_stg</a></code></li>
</ul>
</li>
</ul>
</nav>
</main>
<footer id="footer">
If you have spotted some errors in this site, do not hesitate to report it <a target="_blank" href="https://github.com/Pirate-Kings/yamhl/issues/new">here</a> or just fix it yourself <a target="_blank" href="https://github.com/Pirate-Kings/yamhl/">here</a>.
<p>Generated by <a href="https://pdoc3.github.io/pdoc" title="pdoc: Python API documentation generator"><cite>pdoc</cite> 0.10.0</a>.</p>
</footer>
</body>
</html>